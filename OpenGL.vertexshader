#version 330 core

// data flows in from the C++ program
layout(location = 0) in vec4 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexNormal_modelspace;
layout(location = 2) in vec4 vertexColor;

// data flows out to the fragment shader
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec4 mycolor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;
uniform int wireframe;

void main(){

  // apply the transformation
  gl_Position =  MVP * vertexPosition_modelspace;

  // Position of the vertex, in worldspace : M * position
  Position_worldspace = (M * vertexPosition_modelspace).xyz;

  // Vector that goes from the vertex to the camera, in camera space.
  // In camera space, the camera is at the origin (0,0,0).
  vec3 vertexPosition_cameraspace = ( V * M * vertexPosition_modelspace).xyz;
  EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

  // Normal of the the vertex, in camera space
  Normal_cameraspace = ( V * M * vertexNormal_modelspace).xyz;
  // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
  //        Norm        	vec3 n = normalize( Normal_cameraspace );

  // just pass the color to the fragment shader
  mycolor = vertexColor;

}

